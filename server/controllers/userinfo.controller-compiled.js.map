{"version":3,"sources":["userinfo.controller.js"],"names":[],"mappings":"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","file":"userinfo.controller-compiled.js","sourcesContent":["/**\n * Created by thientran on 8/13/16.\n */\nimport UserInfo from '../models/userinfo';\nimport cuid from 'cuid';\nimport slug from 'limax';\nimport sanitizeHtml from 'sanitize-html';\n\nvar constant = require('../util/constant');\nvar Fconstant = require('../util/fconstant');\nvar fconstant = new Fconstant();\nimport { confirmEmail, verifyUser, checkUserExit }from '../util/sendEmail';\n/**\n * Get all posts\n * @param req\n * @param res\n * @returns void\n */\n// export function getPosts(req, res) {\n//   UserInfo.find().sort('-dateAdded').exec((err, posts) => {\n//     if (err) {\n//       res.status(500).send(err);\n//     }\n//     res.json({ posts });\n//   });\n// }\n\n/**\n * Save a post\n * @param req\n * @param res\n * @returns void\n */\nexport function addUser(req, res) {\n  console.log(req.body.userinfo);\n  var userinfo = new UserInfo(req.body.userinfo);\n\n  checkUserExit(userinfo.email, function (isExit) {\n    if(isExit){\n      fconstant.response(constant.RES_TYPE_JSON, res, false, constant.RES_USER_EXISTS, 'RES_USER_EXISTS');\n    }else{\n      var number = fconstant.hashPlainTextPassword(new Date().getTime().toString());\n      userinfo.isactive = 0;\n      userinfo.activecode = number;\n      userinfo.save(function (err, userreturn) {\n        if (err) return console.error(err);\n        confirmEmail(res, userreturn, number);\n      });\n    }\n  });\n  //\n  // var userinfo = JSON.parse(req.body.userinfo);\n  // if (!userinfo || !userinfo.username || !userinfo.email || !userinfo.password) {\n  //   res.status(403).end();\n  // }\n  //\n  // const newUser = new UserInfo(req.body.userinfo);\n  //\n  // // Let's sanitize inputs\n  // newUser.username = sanitizeHtml(newUser.username);\n  // newUser.email = sanitizeHtml(newUser.email);\n  // newUser.password = sanitizeHtml(newUser.password);\n  //\n  // newUser.cuid = cuid();\n  // newUser.save((err, saved) => {\n  //   if (err) {\n  //     res.status(500).send(err);\n  //   }\n  //   res.json({ newUser: saved });\n  // });\n}\n\nexport function verify(req, res) {\n  console.log(req.path);\n  console.log(req.query);\n  if(req.path == '/verify'){\n    verifyUser(req.query.email, req.query.activecode, function (isSuccess) {\n      if(isSuccess){\n        //fconstant.response(constant.RES_TYPE_JSON, res, true, constant.CREATE_ACTIVE_CODE_SUCCESS, 'CREATE_ACTIVE_CODE_SUCCESS');\n        res.redirect('/sign-up');\n      }else{\n        res.status(403).json({success: false, message: 'WRONG USER'});\n      }\n    });\n   }else {\n    res.status(403).json({success: false, message: 'WRONG USER'});\n  }\n}\n\nexport function SignIn(req, res) {\n  console.log(req.body.usersignin);\n  var usersignin = new UserInfo(req.body.usersignin);\n  let token = fconstant.createToken(usersignin);\n  var query = {'email': usersignin.email, 'password': usersignin.password, 'isactive':1};\n    UserInfo.findOneAndUpdate(query,{'token': token }, {\n    safe: true,\n  }, function (err, usersignin) {\n    console.log(err);\n    console.log(usersignin);\n    if (usersignin !== null){\n      usersignin.password = '';\n      fconstant.response(constant.RES_TYPE_JSON, res, true, constant.RES_USER_SIGNIN_SUCCESS, usersignin);\n    }else {\n      fconstant.response(constant.RES_TYPE_JSON, res, false, constant.RES_USER_SIGNIN_FAIL, err);\n    }\n  });\n}\n"]}