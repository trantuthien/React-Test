{"version":3,"sources":["server.js"],"names":[],"mappings":"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","file":"server-compiled.js","sourcesContent":["import Express from 'express';\nimport compression from 'compression';\nimport mongoose from 'mongoose';\nimport bodyParser from 'body-parser';\nimport path from 'path';\nimport IntlWrapper from '../client/modules/Intl/IntlWrapper';\n\n// Webpack Requirements\nimport webpack from 'webpack';\nimport config from '../webpack.config.dev';\nimport webpackDevMiddleware from 'webpack-dev-middleware';\nimport webpackHotMiddleware from 'webpack-hot-middleware';\n\n// Initialize the Express App\nconst app = new Express();\n\n// Run Webpack dev server in development mode\nif (process.env.NODE_ENV === 'development') {\n  const compiler = webpack(config);\n  app.use(webpackDevMiddleware(compiler, { noInfo: true, publicPath: config.output.publicPath }));\n  app.use(webpackHotMiddleware(compiler));\n}\n\n// React And Redux Setup\nimport { configureStore } from '../client/store';\nimport { Provider } from 'react-redux';\nimport React from 'react';\nimport { renderToString } from 'react-dom/server';\nimport { match, RouterContext } from 'react-router';\nimport Helmet from 'react-helmet';\n\n// Import required modules\nimport routes from '../client/routes';\nimport { fetchComponentData } from './util/fetchData';\nimport posts from './routes/post.routes';\nimport userinfos from './routes/userinfo.routes';\nimport dummyData from './dummyData';\nimport serverConfig from './config';\n\n// Set native promises as mongoose promise\nmongoose.Promise = global.Promise;\n\n// MongoDB Connection\nmongoose.connect(serverConfig.mongoURL, (error) => {\n  if (error) {\n    console.error('Please make sure Mongodb is installed and running!'); // eslint-disable-line no-console\n    throw error;\n  }\n\n  // feed some dummy data in DB.\n  dummyData();\n});\n\n// Apply body Parser and server public assets and routes\napp.use(compression());\napp.use(bodyParser.json({ limit: '20mb' }));\napp.use(bodyParser.urlencoded({ limit: '20mb', extended: false }));\napp.use(Express.static(path.resolve(__dirname, '../dist')));\napp.use('/api', posts);\napp.use('/api/auth', userinfos);\n\n// Render Initial HTML\nconst renderFullPage = (html, initialState) => {\n  const head = Helmet.rewind();\n\n  // Import Manifests\n  const assetsManifest = process.env.webpackAssets && JSON.parse(process.env.webpackAssets);\n  const chunkManifest = process.env.webpackChunkAssets && JSON.parse(process.env.webpackChunkAssets);\n\n  return `\n    <!doctype html>\n    <html>\n      <head>\n        ${head.base.toString()}\n        ${head.title.toString()}\n        ${head.meta.toString()}\n        ${head.link.toString()}\n        ${head.script.toString()}\n\n        ${process.env.NODE_ENV === 'production' ? `<link rel='stylesheet' href='${assetsManifest['/app.css']}' />` : ''}\n        <link href='https://fonts.googleapis.com/css?family=Lato:400,300,700' rel='stylesheet' type='text/css'/>\n        <link rel=\"shortcut icon\" href=\"http://res.cloudinary.com/hashnode/image/upload/v1455629445/static_imgs/mern/mern-favicon-circle-fill.png\" type=\"image/png\" />\n      </head>\n      <body>\n        <div id=\"root\">${html}</div>\n        <script>\n          window.__INITIAL_STATE__ = ${JSON.stringify(initialState)};\n          ${process.env.NODE_ENV === 'production' ?\n          `//<![CDATA[\n          window.webpackManifest = ${JSON.stringify(chunkManifest)};\n          //]]>` : ''}\n        </script>\n        <script src='${process.env.NODE_ENV === 'production' ? assetsManifest['/vendor.js'] : '/vendor.js'}'></script>\n        <script src='${process.env.NODE_ENV === 'production' ? assetsManifest['/app.js'] : '/app.js'}'></script>\n      </body>\n    </html>\n  `;\n};\n\nconst renderError = err => {\n  const softTab = '&#32;&#32;&#32;&#32;';\n  const errTrace = process.env.NODE_ENV !== 'production' ?\n    `:<br><br><pre style=\"color:red\">${softTab}${err.stack.replace(/\\n/g, `<br>${softTab}`)}</pre>` : '';\n  return renderFullPage(`Server Error${errTrace}`, {});\n};\n\n// Server Side Rendering based on routes matched by React-router.\napp.use((req, res, next) => {\n  match({ routes, location: req.url }, (err, redirectLocation, renderProps) => {\n    if (err) {\n      return res.status(500).end(renderError(err));\n    }\n\n    if (redirectLocation) {\n      return res.redirect(302, redirectLocation.pathname + redirectLocation.search);\n    }\n\n    if (!renderProps) {\n      return next();\n    }\n\n    const store = configureStore();\n\n    return fetchComponentData(store, renderProps.components, renderProps.params)\n      .then(() => {\n        const initialView = renderToString(\n          <Provider store={store}>\n            <IntlWrapper>\n              <RouterContext {...renderProps} />\n            </IntlWrapper>\n          </Provider>\n        );\n        const finalState = store.getState();\n\n        res\n          .set('Content-Type', 'text/html')\n          .status(200)\n          .end(renderFullPage(initialView, finalState));\n      })\n      .catch((error) => next(error));\n  });\n});\n\n// start app\napp.listen(serverConfig.port, (error) => {\n  if (!error) {\n    console.log(`MERN is running on port: ${serverConfig.port}! Build something amazing!`); // eslint-disable-line\n  }\n});\n\nexport default app;\n"]}